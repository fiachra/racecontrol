#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var express = require('express')
var httpApp = express()
var debug = require('debug')('qr-sp-auth:server')
var http = require('http')
var https = require('https')
var fs = require('fs')

httpApp.get('*', function(req, res, next) {
  res.redirect('https://' + req.headers.host + '/' + req.path)
})

var redirectHttpPort = normalizePort(process.env.PORT || '3000')
httpApp.set('port', redirectHttpPort)

var httpServer = http.createServer(httpApp)
  .listen(redirectHttpPort, function() {
    console.log('Express HTTP server listening on port ' + httpApp.get('port'))
  })

let keyConfig = {
  key: fs.readFileSync('./certs/private.key'),
  cert: fs.readFileSync('./certs/certificate.crt')
}

let port = normalizePort(process.env.SSL_PORT || '3100')
app.set('port', port)
var newServer = https.createServer(keyConfig, app)
newServer.listen(port)
newServer.on('error', onError)
newServer.on('listening', onListening)

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
  console.log('Express HTTPS server listening on port ' + httpApp.get('port'))
}
